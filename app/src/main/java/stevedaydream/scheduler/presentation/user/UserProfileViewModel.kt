// scheduler/presentation/user/UserProfileViewModel.kt

package stevedaydream.scheduler.presentation.user

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.google.firebase.auth.FirebaseAuth
import dagger.hilt.android.lifecycle.HiltViewModel
import kotlinx.coroutines.flow.*
import kotlinx.coroutines.launch
import stevedaydream.scheduler.data.model.*
import stevedaydream.scheduler.domain.repository.SchedulerRepository
import java.util.*
import javax.inject.Inject

data class UserProfileUiState(
    val isLoading: Boolean = true,
    val currentUser: User? = null,
    val organization: Organization? = null,
    val currentGroup: Group? = null,
    val allGroups: List<Group> = emptyList(),
    val requestResult: Result<Unit>? = null,
    val isEditing: Boolean = false,
    val isSaving: Boolean = false,
    val nameInput: String = "",
    val employeeIdInput: String = "",
    val saveResult: Result<Unit>? = null
)

@HiltViewModel
class UserProfileViewModel @Inject constructor(
    private val repository: SchedulerRepository,
    private val auth: FirebaseAuth
) : ViewModel() {

    private val _uiState = MutableStateFlow(UserProfileUiState())
    val uiState: StateFlow<UserProfileUiState> = _uiState.asStateFlow()

    init {
        loadInitialData()
    }

    // --- ‰øÆÊîπÈñãÂßã ---
    // ÂáΩÂºèÔºösendGroupJoinRequest
    fun sendGroupJoinRequest(targetGroup: Group) {
        val currentUser = _uiState.value.currentUser ?: return
        val currentGroup = _uiState.value.currentGroup
        if (currentUser.currentOrgId.isEmpty()) return

        println("üì® [UserProfile] ËôïÁêÜÁµÑÂà•Âä†ÂÖ•Ë´ãÊ±Ç: ${targetGroup.groupName}")

        viewModelScope.launch {
            // Ê™¢Êü•‰ΩøÁî®ËÄÖÊòØÂê¶ÁÇ∫ÁÆ°ÁêÜÂì°
            val isAdmin = currentUser.role == "org_admin" || currentUser.role == "superuser"

            if (isAdmin) {
                // Â¶ÇÊûúÊòØÁÆ°ÁêÜÂì°ÔºåÁõ¥Êé•Êõ¥Êñ∞ÁµÑÂà•
                val result = repository.updateUserGroup(
                    orgId = currentUser.currentOrgId,
                    userId = currentUser.id,
                    newGroupId = targetGroup.id,
                    oldGroupId = currentGroup?.id
                )
                // ÂèØ‰ª•Âú®ÈÄôË£°Êõ¥Êñ∞ UI ÁãÄÊÖãÊàñÈ°ØÁ§∫ÊàêÂäüË®äÊÅØ
                _uiState.update { it.copy(requestResult = result.map { }) }

            } else {
                // Â¶ÇÊûú‰∏çÊòØÁÆ°ÁêÜÂì°ÔºåÂâáÁôºÈÄÅÂä†ÂÖ•Áî≥Ë´ã
                val request = GroupJoinRequest(
                    id = UUID.randomUUID().toString(),
                    orgId = currentUser.currentOrgId,
                    userId = currentUser.id,
                    userName = currentUser.name,
                    targetGroupId = targetGroup.id,
                    targetGroupName = targetGroup.groupName,
                    status = "pending",
                    requestedAt = Date()
                )

                val result = repository.createGroupJoinRequest(currentUser.currentOrgId, request)
                _uiState.update { it.copy(requestResult = result.map { }) }
            }
        }
    }
    // --- ‰øÆÊîπÁµêÊùü ---

    private fun loadInitialData() {
        val userId = auth.currentUser?.uid
        if (userId == null) {
            println("‚ùå [UserProfile] Ê≤íÊúâÁôªÂÖ•Áî®Êà∂")
            _uiState.update { it.copy(isLoading = false) }
            return
        }

        println("üîç [UserProfile] ÈñãÂßãËºâÂÖ•Áî®Êà∂Ë≥áÊñô: $userId")

        viewModelScope.launch {
            try {
                // ÊåÅÁ∫åÁõ£ËÅΩ User Áâ©‰ª∂ÁöÑËÆäÂåñ
                repository.observeUser(userId)
                    // ‰ΩøÁî® distinctUntilChanged ÈÅøÂÖç‰∏çÂøÖË¶ÅÁöÑÈáçË§áËß∏Áôº
                    // Âè™ÊúâÁï∂ user Áâ©‰ª∂ÁöÑÂÖßÂÆπÁúüÁöÑÊîπËÆäÊôÇÔºå‰∏ãÊ∏∏ÊâçÊúÉÊî∂Âà∞ÈÄöÁü•
                    .distinctUntilChanged()
                    .collect { user ->
                        _uiState.update {
                            it.copy(
                                currentUser = user,
                                // Â¶ÇÊûú‰∏çÊòØÂú®Á∑®ËºØÊ®°ÂºèÔºåÂ∞±ÂêåÊ≠•Êõ¥Êñ∞Ëº∏ÂÖ•Ê°Ü
                                nameInput = if (it.isEditing) it.nameInput else user?.name ?: "",
                                employeeIdInput = if (it.isEditing) it.employeeIdInput else user?.employeeId ?: ""
                            )
                        }

                        // Áï∂ user Áâ©‰ª∂Â≠òÂú®‰∏î currentOrgId ‰∏çÁÇ∫Á©∫ÊôÇÔºåËºâÂÖ•ÁµÑÁπîËàáÁæ§ÁµÑË≥áË®ä
                        // distinctUntilChanged ÊúÉÁ¢∫‰øùÂç≥‰Ωø user Áâ©‰ª∂ÁöÑÂÖ∂‰ªñÊ¨Ñ‰ΩçËÆäÂãïÔºå
                        // Âè™Ë¶Å currentOrgId Ê≤íËÆäÔºåÈÄôÊÆµÈÇèËºØ‰πü‰∏çÊúÉ‰∏ÄÁõ¥ÈáçË§áÂü∑Ë°å„ÄÇ
                        if (user != null && user.currentOrgId.isNotEmpty()) {
                            loadOrganizationAndGroups(user)
                        } else {
                            // Â¶ÇÊûú‰ΩøÁî®ËÄÖÊ≤íÊúâÁµÑÁπîÔºåÁ¢∫‰øùÊ∏ÖÈô§ËàäË≥áÊñô‰∏¶ÂÅúÊ≠¢ËºâÂÖ•ÂãïÁï´
                            _uiState.update {
                                it.copy(
                                    isLoading = false,
                                    organization = null,
                                    currentGroup = null,
                                    allGroups = emptyList()
                                )
                            }
                        }
                    }
            } catch (e: Exception) {
                _uiState.update { it.copy(isLoading = false) }
            }
        }
    }

    private fun loadOrganizationAndGroups(user: User) {
        // ‰ΩøÁî® currentOrgId ‰æÜËºâÂÖ•ÁµÑÁπî
        viewModelScope.launch {
            try {
                repository.observeOrganization(user.currentOrgId).collect { org ->
                    _uiState.update { it.copy(organization = org) }
                }
            } catch (e: Exception) {
                println("‚ùå [UserProfile] ËºâÂÖ•ÁµÑÁπîÂ§±Êïó: ${e.message}")
            }
        }

        // ‰ΩøÁî® currentOrgId ‰æÜËºâÂÖ•ÁµÑÂà•
        viewModelScope.launch {
            try {
                repository.observeGroups(user.currentOrgId).collect { groups ->
                    val current = groups.find { it.memberIds.contains(user.id) }
                    _uiState.update {
                        it.copy(
                            allGroups = groups,
                            currentGroup = current,
                            isLoading = false
                        )
                    }
                }
            } catch (e: Exception) {
                _uiState.update { it.copy(isLoading = false) }
            }
        }
    }

    fun enableEditMode() {
        println("‚úèÔ∏è [UserProfile] ÈÄ≤ÂÖ•Á∑®ËºØÊ®°Âºè")
        _uiState.update {
            it.copy(
                isEditing = true,
                nameInput = it.currentUser?.name ?: "",
                employeeIdInput = it.currentUser?.employeeId ?: ""
            )
        }
    }

    fun cancelEditMode() {
        println("‚ùå [UserProfile] ÂèñÊ∂àÁ∑®ËºØ")
        _uiState.update { it.copy(isEditing = false) }
    }

    fun onNameChange(name: String) {
        _uiState.update { it.copy(nameInput = name) }
    }

    fun onEmployeeIdChange(employeeId: String) {
        _uiState.update { it.copy(employeeIdInput = employeeId) }
    }

    fun saveUserProfile() {
        val userId = auth.currentUser?.uid ?: return
        println("üíæ [UserProfile] ÈñãÂßãÂÑ≤Â≠ò: name=${_uiState.value.nameInput}, employeeId=${_uiState.value.employeeIdInput}")

        viewModelScope.launch {
            _uiState.update { it.copy(isSaving = true) }

            val updates = mapOf(
                "name" to _uiState.value.nameInput.trim(),
                "employeeId" to _uiState.value.employeeIdInput.trim()
            )

            val result = repository.updateUser(userId, updates)

            if (result.isSuccess) {
                println("‚úÖ [UserProfile] ÂÑ≤Â≠òÊàêÂäü")
                _uiState.update {
                    it.copy(
                        isSaving = false,
                        isEditing = false,
                        // Áõ¥Êé•Êõ¥Êñ∞ currentUserÔºåÈÅøÂÖçÁ≠âÂæÖ Firestore ÂõûÈ•ãÁöÑÂª∂ÈÅ≤
                        currentUser = it.currentUser?.copy(
                            name = _uiState.value.nameInput.trim(),
                            employeeId = _uiState.value.employeeIdInput.trim()
                        ),
                        saveResult = result
                    )
                }
            } else {
                println("‚ùå [UserProfile] ÂÑ≤Â≠òÂ§±Êïó: ${result.exceptionOrNull()?.message}")
                _uiState.update {
                    it.copy(
                        isSaving = false,
                        isEditing = true,
                        saveResult = result
                    )
                }
            }
        }
    }

    fun clearSaveResult() {
        _uiState.update { it.copy(saveResult = null) }
    }

    fun clearRequestResult() {
        _uiState.update { it.copy(requestResult = null) }
    }
}